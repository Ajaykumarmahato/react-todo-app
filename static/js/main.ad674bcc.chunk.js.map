{"version":3,"sources":["components/ToDoContent.js","components/AdminToDo.js","components/ManagerToDo.js","serviceWorker.js","index.js"],"names":["ToDoContent","state","name","email","newItem","title","props","itemsList","itemList","count","buttonStatus","isHidden","defaultBgColor","bgColorOptions","userInput","this","setState","removedItem","itemArray","splice","showHideValue","bgColor","className","map","onClick","changeBgColor","showHideTodo","onSubmit","addItem","type","value","placeholder","onChange","e","getInput","target","disabled","valkey","key","removeItem","Component","AdminToDo","ManagerToDo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad674bcc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class ToDoContent extends Component {\r\n  // static getDerivedStateFromProps(PrevProps, PrevState) {\r\n  //   return {\r\n  //     title: PrevProps.title,\r\n  //   };\r\n  // }\r\n\r\n  state = {\r\n    name: [],\r\n    email: [],\r\n    newItem: \"\",\r\n    title: this.props.title + \" \" + \"ToDo App\",\r\n    itemsList: this.props.itemList,\r\n    count: this.props.count + 1,\r\n    buttonStatus: \"-\",\r\n    isHidden: false,\r\n    defaultBgColor: \"default\",\r\n    bgColorOptions: [\"red\", \"teal\", \"green\", \"default\"],\r\n  };\r\n\r\n  getInput(userInput) {\r\n    this.setState({\r\n      newItem: userInput,\r\n    });\r\n  }\r\n  addItem(userInput) {\r\n    this.setState({\r\n      itemsList: [...this.state.itemsList, userInput],\r\n      newItem: \"\",\r\n    });\r\n  }\r\n  removeItem(removedItem) {\r\n    let itemArray = this.state.itemsList;\r\n    itemArray.splice(removedItem, 1);\r\n    this.setState({\r\n      itemList: itemArray,\r\n    });\r\n  }\r\n  showHideTodo(showHideValue) {\r\n    if (showHideValue === false) {\r\n      this.setState({\r\n        isHidden: true,\r\n        buttonStatus: \"+\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isHidden: false,\r\n        buttonStatus: \"-\",\r\n      });\r\n    }\r\n  }\r\n  changeBgColor(bgColor) {\r\n    this.setState({\r\n      defaultBgColor: bgColor,\r\n    });\r\n  }\r\n\r\n  shouldComponentUpdate(props, state) {\r\n    if (state.count >= 1) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`todo-form bg-${this.state.defaultBgColor}`}>\r\n        <div className=\"todo-header\">\r\n          <br></br>\r\n          {this.state.bgColorOptions.map((bgColor) => (\r\n            <button\r\n              onClick={() => this.changeBgColor(bgColor)}\r\n              className={`bg-${bgColor}`}\r\n            >\r\n              {bgColor}\r\n            </button>\r\n          ))}{\" \"}\r\n          <br></br>\r\n          <br></br>\r\n          <h1>{this.state.title}</h1>\r\n          <button onClick={() => this.showHideTodo(this.state.isHidden)}>\r\n            <b>{this.state.buttonStatus}</b>\r\n          </button>\r\n          <br></br>\r\n          <br></br>\r\n        </div>\r\n        <div className={this.state.isHidden ? \"hide-todo\" : \"show-todo\"}>\r\n          <form onSubmit={() => this.addItem(this.state.newItem)}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"text-input\"\r\n              value={this.state.newItem}\r\n              placeholder=\"Add New Item\"\r\n              onChange={(e) => this.getInput(e.target.value)}\r\n            />\r\n            <button\r\n              className=\"add-button\"\r\n              onClick={() => this.addItem(this.state.newItem)}\r\n              disabled={!this.state.newItem}\r\n            >\r\n              + ADD\r\n            </button>\r\n          </form>\r\n          <p>\r\n            <b>{this.state.newItem}</b>\r\n          </p>\r\n          <div className=\"todo-items\">\r\n            <ul>\r\n              {this.state.itemsList.map((value, valkey) => (\r\n                <li key={valkey}>\r\n                  <button\r\n                    className=\"remove-button\"\r\n                    onClick={() => this.removeItem(valkey)}\r\n                  >\r\n                    X\r\n                  </button>{\" \"}\r\n                  &nbsp;\r\n                  {value} &nbsp; <br></br> <br></br>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../components/ToDo.css\";\r\nimport ToDoContent from \"./ToDoContent\";\r\n\r\nexport default class AdminToDo extends Component {\r\n  state = {\r\n    title: \"Admin\",\r\n    itemList: [\"Admin existing\"],\r\n    count: 0,\r\n  };\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     title: \"Admin Todo App\",\r\n  //     newItem: \"\",\r\n  //     itemList: [],\r\n  //   };\r\n  // }\r\n  // getInput(userInput) {\r\n  //   this.setState(\r\n  //     {\r\n  //       newItem: userInput,\r\n  //     },\r\n  //     () => console.log(userInput)\r\n  //   );\r\n  // }\r\n  // addItem(userInput) {\r\n  //   let itemArray = this.state.itemList;\r\n  //   itemArray.push(userInput);\r\n  //   this.setState({\r\n  //     itemList: itemArray,\r\n  //     newItem: \"\",\r\n  //   });\r\n  // }\r\n  // removeItem(removedItem) {\r\n  //   let itemArray = this.state.itemList;\r\n  //   itemArray.splice(removedItem, 1);\r\n  //   this.setState({\r\n  //     itemList: itemArray,\r\n  //   });\r\n  // }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <ToDoContent\r\n          title={this.state.title}\r\n          newItem={this.state.newItem}\r\n          itemList={this.state.itemList}\r\n          getInput={this.getInput.bind(this)}\r\n          addItem={this.addItem.bind(this)}\r\n          removeItem={this.removeItem.bind(this)}\r\n        /> */}\r\n        <ToDoContent\r\n          title={this.state.title}\r\n          itemList={this.state.itemList}\r\n          count={this.state.count}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../components/ToDo.css\";\r\nimport ToDoContent from \"./ToDoContent\";\r\n\r\nexport default class ManagerToDo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"Manager\",\r\n      itemList: [\"Manager existing\"],\r\n      count: 1,\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ToDoContent\r\n          title={this.state.title}\r\n          itemList={this.state.itemList}\r\n          count={this.state.count}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AdminToDo from \"./components/AdminToDo\";\nimport ManagerToDo from \"./components/ManagerToDo\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"mainContainer\">\n      <AdminToDo />\n      <ManagerToDo />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}